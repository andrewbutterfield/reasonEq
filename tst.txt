ðŸ›  devproj.EQV> load
@iT.rest:  [(3,TVar "A" WS),(3,TVar "B" WS),(3,TVar "C" WS),(3,TVar "D" WS),(3,TVar "E" WS),(3,TSym ".")]
@gTN.rest:  [(3,TVar "B" WS),(3,TVar "C" WS),(3,TVar "D" WS),(3,TVar "E" WS),(3,TSym ".")]
@gP.rest:  [(3,TVar "B" WS),(3,TVar "C" WS),(3,TVar "D" WS),(3,TVar "E" WS),(3,TSym ".")]
@iT.rest:  [(3,TVar "C" WS),(3,TVar "D" WS),(3,TVar "E" WS),(3,TSym ".")]
@gTN.rest:  [(3,TVar "D" WS),(3,TVar "E" WS),(3,TSym ".")]
@gP.rest:  [(3,TVar "D" WS),(3,TVar "E" WS),(3,TSym ".")]
@iT.rest:  [(3,TVar "E" WS),(3,TSym ".")]
@gTN.rest:  [(3,TSym ".")]
@gP.rest:  [(3,TSym ".")]
theory parse failed
premature file end during gotTypeName '.'
ðŸ›  devproj.EQV> load
@iT.rest:  [(3,TVar "A" WS),(3,TVar "B" WS),(3,TVar "C" WS),(3,TVar "D" WS),(3,TVar "E" WS),(3,TVar "F" WS),(3,TSym ".")]
@gTN.rest:  [(3,TVar "B" WS),(3,TVar "C" WS),(3,TVar "D" WS),(3,TVar "E" WS),(3,TVar "F" WS),(3,TSym ".")]
@gP.rest:  [(3,TVar "B" WS),(3,TVar "C" WS),(3,TVar "D" WS),(3,TVar "E" WS),(3,TVar "F" WS),(3,TSym ".")]
@iT.rest:  [(3,TVar "C" WS),(3,TVar "D" WS),(3,TVar "E" WS),(3,TVar "F" WS),(3,TSym ".")]
@gTN.rest:  [(3,TVar "D" WS),(3,TVar "E" WS),(3,TVar "F" WS),(3,TSym ".")]
@gP.rest:  [(3,TVar "D" WS),(3,TVar "E" WS),(3,TVar "F" WS),(3,TSym ".")]
@iT.rest:  [(3,TVar "E" WS),(3,TVar "F" WS),(3,TSym ".")]
@gTN.rest:  [(3,TVar "F" WS),(3,TSym ".")]
@gP.rest:  [(3,TVar "F" WS),(3,TSym ".")]
@iT.rest:  [(3,TSym ".")]
@gP.rest':  [(3,TSym ".")]
@gP.tok:  TSym "."
@gP.rest':  [(3,TSym ".")]
@gP.tok:  TSym "."
@gP.rest':  [(3,TSym ".")]
@gP.tok:  TSym "."
Parsed as:
@iT.nm:  "Prod"
@gTN.var:  "A"
@iT.nm:  "B"
@gTN.var:  "C"
@iT.nm:  "D"
@gTN.var:  "E"
@iT.nm:  "F"
Theory {thName = "Proto", thDeps = [], known = VD ("",fromList [(VR (Id "prodt" 0,VO,WS),KV (TC (Id "Prod" 0) [TV (Id "A" 0),TC (Id "B" 0) [TV (Id "C" 0),TC (Id "D" 0) [TV (Id "E" 0),TV (Id "F" 0)]]]))],fromList [],fromList []), laws = [], proofs = [], auto = AutoLaws {simps = [], folds = []}, conjs = []}
ðŸ›  devproj.EQV> 
