BEGIN REQSTATE
BEGIN THEORIES
THNAMES = ["And","AndOrInvert","Arithmetic","Equality","Equiv","Exists","ForAll","Implies","LTL","Lists","Not","Or","Sets","UClose","UTCP","UTPBase"]
SDAG = [[("UTCP",["UTPBase","Sets","UClose","Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("UTPBase",["UClose","Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Lists",["Implies","Equiv","Equality","ForAll","Arithmetic","Sets"]),("LTL",["Equality","Exists","ForAll","Implies","AndOrInvert","And","Or","Not","Equiv"]),("UClose",["Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Sets",["Implies","Equiv","Equality","ForAll","Arithmetic"]),("Exists",["ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Arithmetic",["Implies","Equiv","Equality"]),("ForAll",["Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Equality",["Implies","Equiv"])],[("Implies",["AndOrInvert","And","Or","Not","Equiv"])],[("AndOrInvert",["And","Or","Not","Equiv"])],[("And",["Or","Not","Equiv"])],[("Or",["Not","Equiv"])],[("Not",["Equiv"])],[("Equiv",[])]]
END THEORIES
CURRTHEORY = UClose
BEGIN LIVE-PROOFS
BEGIN MAP LIVE-PROOFS
("UClose","univ_id_on_closed")
BEGIN LIVE-PROOF
TH-NAME: UClose
CJ-NAME: univ_id_on_closed
CONJ = ASN (C (TF TB (TG (Id "B" 0))) True (Id "eqv" 0) [X (Id "[_]" 0) (V (TF TB (TG (Id "B" 0))) (VR (Id "P" 0,VP,WS))),V (TF TB (TG (Id "B" 0))) (VR (Id "P" 0,VP,WS))],([VSC (GV (VR (Id "P" 0,VP,WS))) (fromList []) (Just (fromList [])) Nothing],fromList []))
SIDE = ([VSC (GV (VR (Id "P" 0,VP,WS))) (fromList []) (Just (fromList [])) Nothing],fromList [])
STRAT red-All
BEGIN SEQZIP
TERMZIP = (X (Id "[_]" 0) (V (TF TB (TG (Id "B" 0))) (VR (Id "P" 0,VP,WS))),[Cons' (TF TB (TG (Id "B" 0))) True (Id "eqv" 0) [] [V (TF TB (TG (Id "B" 0))) (VR (Id "P" 0,VP,WS))]])
BEGIN SEQUENT'
SIDECOND = ([VSC (GV (VR (Id "P" 0,VP,WS))) (fromList []) (Just (fromList [])) Nothing],fromList [])
LAWS' = CLaws' {hyp0 = Theory {thName = "H.univ_id_on_closed", thDeps = [], known = VD ("",fromList [],fromList [],fromList []), laws = [], proofs = [], auto = AutoLaws {simps = [], folds = [], unfolds = []}, conjs = []}, whichC = Lft, otherC = K (TF TB (TG (Id "B" 0))) (VB True)}
END SEQUENT'
END SEQZIP
FPATH: [1]
BEGIN LIST STEPS
END LIST STEPS
END LIVE-PROOF
END MAP LIVE-PROOFS
END LIVE-PROOFS
END REQSTATE
