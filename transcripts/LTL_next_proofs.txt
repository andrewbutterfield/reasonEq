Theory 'LTL'
depends on: Equality,Exists,ForAll,Implies,AndOrInvert,And,Or,Not,Equiv
Knowns:
◻ :  𝔹 ⟶  𝔹 
◇ :  𝔹 ⟶  𝔹 
○ :  𝔹 ⟶  𝔹 
until :  𝔹 ⟶  𝔹 ⟶  𝔹 
wait :  𝔹 ⟶  𝔹 ⟶  𝔹 
Laws:
   1. ⊤  “next_self_dual”      ○(¬P) ≡ ¬○(P)  ⊤
   2. ⊤  “next_implies_distr”  ○(P ⟹   Q) ≡ ○(P) ⟹   ○(Q)  ⊤
   3. ∎  “linearity”           ○(P) ≡ ¬○(¬P)  ⊤
   4. ∎  “next_true”           ○(true) ≡ true  ⊤
   5. ∎  “next_false”          ○(false) ≡ false  ⊤
   6. ∎  “next_or_distr”       ○(P ∨ Q) ≡ ○(P) ∨ ○(Q)  ⊤
   7. ∎  “next_and_distr”      ○(P ∧ Q) ≡ ○(P) ∧ ○(Q)  ⊤
   8. ∎  “next_eqv_distr”      ○(P ≡ Q) ≡ (○(P) ≡ ○(Q))  ⊤
Conjectures:
NONE.
AutoLaws:
   i. simps:

  ii. folds:

 iii. unfolds:

🛠 devproj.LTL> sh P

Completed Proofs (true names):
 next_eqv_distr  (red-L2R, size:7)
 next_and_distr  (red-L2R, size:7)
 next_or_distr  (red-All, size:11)
 next_false  (red-L2R, size:4)
 next_true  (red-L2R, size:3)
 linearity  (red-R2L, size:2)

🛠 devproj.LTL> sh P linearity

linearity : ○(P) ≡ ¬○(¬P)
by 'red-R2L'
---
¬○(¬P)
 = 'match-rhs next_self_dual @[]'
    { P  ⟼ ¬P, ○  ⟼ ○, ¬  ⟼ ¬ }
○(¬¬P)
 = 'match-lhs not_invol @[1]'
    { P  ⟼ P, ¬  ⟼ ¬ }
○(P)

🛠 devproj.LTL> sh P next_true

next_true : ○(true) ≡ true
by 'red-L2R'
---
○(true)
 = 'match-eqv-pvar(2) imp_l-unit @[1]'
    { P  ⟼ true }
○(true ⟹   true)
 = 'match-lhs next_implies_distr @[]'
    { P  ⟼ true, Q  ⟼ true, ⟹    ⟼ ⟹  , ○  ⟼ ○ }
○(true) ⟹   ○(true)
 = 'match-lhs imp_refl @[]'
    { P  ⟼ ○(true), ⟹    ⟼ ⟹   }
true

🛠 devproj.LTL> sh P next_false

next_false : ○(false) ≡ false
by 'red-L2R'
---
○(false)
 = 'match-lhs linearity @[]'
    { P  ⟼ false, ○  ⟼ ○ }
¬○(¬false)
 = 'match-lhs false_neg @[1,1]'
    { ¬  ⟼ ¬ }
¬○(true)
 = 'match-lhs next_true @[1]'
    { ○  ⟼ ○ }
¬true
 = 'match-rhs false_def @[]'
    { ¬  ⟼ ¬ }
false

🛠 devproj.LTL> sh P next_or_distr

next_or_distr : ○(P ∨ Q) ≡ ○(P) ∨ ○(Q)
by 'red-All'
---
○(P ∨ Q) ≡ ○(P) ∨ ○(Q)
 = 'match-lhs linearity @[1]'
    { P  ⟼ P ∨ Q, ○  ⟼ ○ }
¬○(¬(P ∨ Q)) ≡ ○(P) ∨ ○(Q)
 = 'match-lhs linearity @[2,1]'
    { P  ⟼ P, ○  ⟼ ○ }
¬○(¬(P ∨ Q)) ≡ ¬○(¬P) ∨ ○(Q)
 = 'match-lhs linearity @[2,2]'
    { P  ⟼ Q, ○  ⟼ ○ }
¬○(¬(P ∨ Q)) ≡ ¬○(¬P) ∨ ¬○(¬Q)
 = 'match-rhs imp_def2 @[2]'
    { P  ⟼ ○(¬P), Q  ⟼ ¬○(¬Q), ¬  ⟼ ¬, ∨  ⟼ ∨ }
¬○(¬(P ∨ Q)) ≡ ○(¬P) ⟹   ¬○(¬Q)
 = 'match-rhs linearity @[2,2]'
    { P  ⟼ Q, ○  ⟼ ○, ¬  ⟼ ¬ }
¬○(¬(P ∨ Q)) ≡ ○(¬P) ⟹   ○(Q)
 = 'match-rhs next_implies_distr @[2]'
    { P  ⟼ ¬P, Q  ⟼ Q, ⟹    ⟼ ⟹  , ○  ⟼ ○ }
¬○(¬(P ∨ Q)) ≡ ○(¬P ⟹   Q)
 = 'match-eqv-pvar(2) not_invol @[1,1,1,1,1]'
    { P  ⟼ P }
¬○(¬(¬¬P ∨ Q)) ≡ ○(¬P ⟹   Q)
 = 'match-rhs imp_def2 @[1,1,1,1]'
    { P  ⟼ ¬P, Q  ⟼ Q, ¬  ⟼ ¬, ∨  ⟼ ∨ }
¬○(¬(¬P ⟹   Q)) ≡ ○(¬P ⟹   Q)
 = 'match-lhs next_self_dual @[1,1]'
    { P  ⟼ ¬P ⟹   Q, ○  ⟼ ○, ¬  ⟼ ¬ }
¬¬○(¬P ⟹   Q) ≡ ○(¬P ⟹   Q)
 = 'match-lhs not_invol @[1]'
    { P  ⟼ ○(¬P ⟹   Q), ¬  ⟼ ¬ }
○(¬P ⟹   Q) ≡ ○(¬P ⟹   Q)
 = 'match-all eqv_refl @[]'
    { P  ⟼ ○(¬P ⟹   Q), ≡  ⟼ ≡ }
true

🛠 devproj.LTL> sh Pnext_and_dist next_and_distr

next_and_distr : ○(P ∧ Q) ≡ ○(P) ∧ ○(Q)
by 'red-L2R'
---
○(P ∧ Q)
 = 'match-eqv-pvar(2) not_invol @[1]'
    { P  ⟼ P ∧ Q }
○(¬¬(P ∧ Q))
 = 'match-lhs deMorgan_and @[1,1]'
    { P  ⟼ P, Q  ⟼ Q, ∧  ⟼ ∧, ¬  ⟼ ¬ }
○(¬(¬P ∨ ¬Q))
 = 'match-lhs next_self_dual @[]'
    { P  ⟼ ¬P ∨ ¬Q, ○  ⟼ ○, ¬  ⟼ ¬ }
¬○(¬P ∨ ¬Q)
 = 'match-lhs next_or_distr @[1]'
    { P  ⟼ ¬P, Q  ⟼ ¬Q, ○  ⟼ ○, ∨  ⟼ ∨ }
¬(○(¬P) ∨ ○(¬Q))
 = 'match-lhs deMorgan_or @[]'
    { P  ⟼ ○(¬P), Q  ⟼ ○(¬Q), ¬  ⟼ ¬, ∨  ⟼ ∨ }
¬○(¬P) ∧ ¬○(¬Q)
 = 'match-rhs linearity @[1]'
    { P  ⟼ P, ○  ⟼ ○, ¬  ⟼ ¬ }
○(P) ∧ ¬○(¬Q)
 = 'match-rhs linearity @[2]'
    { P  ⟼ Q, ○  ⟼ ○, ¬  ⟼ ¬ }
○(P) ∧ ○(Q)

🛠 devproj.LTL> sh P next_eqv_distr

next_eqv_distr : ○(P ≡ Q) ≡ (○(P) ≡ ○(Q))
by 'red-L2R'
---
○(P ≡ Q)
 = 'match-equiv[1,2] eqv_def @[1]'
    { P  ⟼ P, Q  ⟼ Q, ≡  ⟼ ≡ }
○(P ∧ Q ∨ ¬P ∧ ¬Q)
 = 'match-lhs next_or_distr @[]'
    { P  ⟼ P ∧ Q, Q  ⟼ ¬P ∧ ¬Q, ○  ⟼ ○, ∨  ⟼ ∨ }
○(P ∧ Q) ∨ ○(¬P ∧ ¬Q)
 = 'match-lhs next_and_distr @[1]'
    { P  ⟼ P, Q  ⟼ Q, ∧  ⟼ ∧, ○  ⟼ ○ }
○(P) ∧ ○(Q) ∨ ○(¬P ∧ ¬Q)
 = 'match-lhs next_and_distr @[2]'
    { P  ⟼ ¬P, Q  ⟼ ¬Q, ∧  ⟼ ∧, ○  ⟼ ○ }
○(P) ∧ ○(Q) ∨ ○(¬P) ∧ ○(¬Q)
 = 'match-lhs next_self_dual @[2,1]'
    { P  ⟼ P, ○  ⟼ ○, ¬  ⟼ ¬ }
○(P) ∧ ○(Q) ∨ ¬○(P) ∧ ○(¬Q)
 = 'match-lhs next_self_dual @[2,2]'
    { P  ⟼ Q, ○  ⟼ ○, ¬  ⟼ ¬ }
○(P) ∧ ○(Q) ∨ ¬○(P) ∧ ¬○(Q)
 = 'match-equiv[3] eqv_def @[]'
    { P  ⟼ ○(P), Q  ⟼ ○(Q), ∧  ⟼ ∧, ¬  ⟼ ¬, ∨  ⟼ ∨ }
○(P) ≡ ○(Q)


