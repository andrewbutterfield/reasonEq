BEGIN REQSTATE
BEGIN THEORIES
THNAMES = ["And","AndOrInvert","Arithmetic","Equality","Equiv","Exists","ForAll","Implies","Lists","Not","Or","Sets","UClose","UTCP","UTPBase"]
SDAG = [[("UTCP",["UTPBase","UClose","Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("UTPBase",["UClose","Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Lists",["Implies","Equiv","Equality","ForAll","Arithmetic","Sets"]),("UClose",["Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Sets",["Implies","Equiv","Equality","ForAll","Arithmetic"]),("Exists",["ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Arithmetic",["Implies","Equiv","Equality"]),("ForAll",["Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Equality",["Implies","Equiv"])],[("Implies",["AndOrInvert","And","Or","Not","Equiv"])],[("AndOrInvert",["And","Or","Not","Equiv"])],[("And",["Or","Not","Equiv"])],[("Or",["Not","Equiv"])],[("Not",["Equiv"])],[("Equiv",[])]]
END THEORIES
CURRTHEORY = UTCP
BEGIN LIVE-PROOFS
BEGIN MAP LIVE-PROOFS
("UTCP","X_X_comp")
BEGIN LIVE-PROOF
TH-NAME: UTCP
CJ-NAME: X_X_comp
CONJ = ASN (C (TF TB (TG (Id "B" 0))) True (Id "eqv" 0) [C (TF TB (TG (Id "B" 0))) False (Id ";" 0) [C (TF TB (TG (Id "B" 0))) False (Id "X" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "E1" 0,VO,WS)),V (TF TB (TG (Id "B" 0))) (VR (Id "a" 0,VP,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "R1" 0,VO,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "N1" 0,VO,WS))],C (TF TB (TG (Id "B" 0))) False (Id "X" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "E2" 0,VO,WS)),V (TF TB (TG (Id "B" 0))) (VR (Id "b" 0,VP,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "R1" 0,VO,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "N1" 0,VO,WS))]],C (TF TB (TG (Id "B" 0))) True (Id "and" 0) [C (TF TB (TG (Id "B" 0))) True (Id "=" 0) [C (TC (Id "P" 0) [TV (Id "t" 0)]) False (Id "union" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "E2" 0,VO,WS)),C (TC (Id "P" 0) [TV (Id "t" 0)]) False (Id "\\" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "R1" 0,VO,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "N1" 0,VO,WS))]],V (TC (Id "P" 0) [TV (Id "t" 0)]) (VR (Id "emptyset" 0,VO,WS))],C (TF TB (TG (Id "B" 0))) False (Id "X" 0) [C (TC (Id "P" 0) [TV (Id "t" 0)]) False (Id "union" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "E1" 0,VO,WS)),C (TC (Id "P" 0) [TV (Id "t" 0)]) False (Id "\\" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "E2" 0,VO,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "N1" 0,VO,WS))]],C (TF TB (TG (Id "B" 0))) False (Id ";" 0) [V (TF TB (TG (Id "B" 0))) (VR (Id "a" 0,VP,WS)),V (TF TB (TG (Id "B" 0))) (VR (Id "b" 0,VP,WS))],C (TC (Id "P" 0) [TV (Id "t" 0)]) False (Id "union" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "R1" 0,VO,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "R2" 0,VO,WS))],C (TC (Id "P" 0) [TV (Id "t" 0)]) False (Id "union" 0) [C (TC (Id "P" 0) [TV (Id "t" 0)]) False (Id "\\" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "N1" 0,VO,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "R2" 0,VO,WS))],V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "N2" 0,VO,WS))]]]],([],fromList []))
SIDE = ([],fromList [])
STRAT red-L2R
BEGIN SEQZIP
TERMZIP = (C (TF TB (TG (Id "B" 0))) False (Id ";" 0) [C (TF TB (TG (Id "B" 0))) False (Id "X" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "E1" 0,VO,WS)),V (TF TB (TG (Id "B" 0))) (VR (Id "a" 0,VP,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "R1" 0,VO,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "N1" 0,VO,WS))],C (TF TB (TG (Id "B" 0))) False (Id "X" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "E2" 0,VO,WS)),V (TF TB (TG (Id "B" 0))) (VR (Id "b" 0,VP,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "R1" 0,VO,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "N1" 0,VO,WS))]],[])
BEGIN SEQUENT'
SIDECOND = ([],fromList [])
LAWS' = CLaws' {hyp0 = Theory {thName = "H.X_X_comp", thDeps = [], known = VD (fromList [],fromList [],fromList []), laws = [], proofs = [], auto = AutoLaws {simps = [], folds = [], unfolds = []}, conjs = []}, whichC = Lft, otherC = C (TF TB (TG (Id "B" 0))) True (Id "and" 0) [C (TF TB (TG (Id "B" 0))) True (Id "=" 0) [C (TC (Id "P" 0) [TV (Id "t" 0)]) False (Id "union" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "E2" 0,VO,WS)),C (TC (Id "P" 0) [TV (Id "t" 0)]) False (Id "\\" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "R1" 0,VO,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "N1" 0,VO,WS))]],V (TC (Id "P" 0) [TV (Id "t" 0)]) (VR (Id "emptyset" 0,VO,WS))],C (TF TB (TG (Id "B" 0))) False (Id "X" 0) [C (TC (Id "P" 0) [TV (Id "t" 0)]) False (Id "union" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "E1" 0,VO,WS)),C (TC (Id "P" 0) [TV (Id "t" 0)]) False (Id "\\" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "E2" 0,VO,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "N1" 0,VO,WS))]],C (TF TB (TG (Id "B" 0))) False (Id ";" 0) [V (TF TB (TG (Id "B" 0))) (VR (Id "a" 0,VP,WS)),V (TF TB (TG (Id "B" 0))) (VR (Id "b" 0,VP,WS))],C (TC (Id "P" 0) [TV (Id "t" 0)]) False (Id "union" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "R1" 0,VO,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "R2" 0,VO,WS))],C (TC (Id "P" 0) [TV (Id "t" 0)]) False (Id "union" 0) [C (TC (Id "P" 0) [TV (Id "t" 0)]) False (Id "\\" 0) [V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "N1" 0,VO,WS)),V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "R2" 0,VO,WS))],V (TC (Id "P" 0) [TG (Id "RE" 0)]) (VR (Id "N2" 0,VO,WS))]]]}
END SEQUENT'
END SEQZIP
FPATH: []
BEGIN LIST STEPS
END LIST STEPS
END LIVE-PROOF
END MAP LIVE-PROOFS
END LIVE-PROOFS
END REQSTATE
