BEGIN REQSTATE
BEGIN REQSET
MMD = 20
MHT = True
MHQ = True
MHF = True
END REQSET
BEGIN THEORIES
THNAMES = ["And","AndOrInvert","Equality","Equiv","Exists","ForAll","Implies","Not","Or","UClose","UTPBase","XYZ"]
SDAG = [[("XYZ",["UClose","Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"]),("UTPBase",["UClose","Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("UClose",["Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Exists",["ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("ForAll",["Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Equality",["Implies","Equiv"])],[("Implies",["AndOrInvert","And","Or","Not","Equiv"])],[("AndOrInvert",["And","Or","Not","Equiv"])],[("And",["Or","Not","Equiv"])],[("Or",["Not","Equiv"])],[("Not",["Equiv"])],[("Equiv",[])]]
END THEORIES
CURRTHEORY = UTPBase
BEGIN LIVE-PROOFS
BEGIN MAP LIVE-PROOFS
("UTPBase","cond_assoc")
BEGIN LIVE-PROOF
TH-NAME: UTPBase
CJ-NAME: cond_assoc
CONJ = ASN (C P True (Id "eqv" 0) [C P True (Id "cond" 0) [C P True (Id "cond" 0) [V P (VR (Id "P" 0,VP,WS)),V P (VR (Id "b" 0,VP,WB)),V P (VR (Id "Q" 0,VP,WS))],V P (VR (Id "c" 0,VP,WB)),V P (VR (Id "R" 0,VP,WS))],C P True (Id "cond" 0) [V P (VR (Id "P" 0,VP,WS)),C P True (Id "and" 0) [V P (VR (Id "b" 0,VP,WB)),V P (VR (Id "c" 0,VP,WB))],C P True (Id "cond" 0) [V P (VR (Id "Q" 0,VP,WS)),V P (VR (Id "c" 0,VP,WB)),V P (VR (Id "R" 0,VP,WS))]]],([],fromList []))
SIDE = ([],fromList [])
STRAT red-bth
BEGIN SEQZIP
TERMZIP = (C P True (Id "cond" 0) [C P True (Id "cond" 0) [V P (VR (Id "P" 0,VP,WS)),V P (VR (Id "b" 0,VP,WB)),V P (VR (Id "Q" 0,VP,WS))],V P (VR (Id "c" 0,VP,WB)),V P (VR (Id "R" 0,VP,WS))],[])
BEGIN SEQUENT'
SIDECOND = ([],fromList [])
LAWS' = CLaws' {hyp0 = Theory {thName = "H.cond_assoc", thDeps = [], known = VD (fromList [],fromList [],fromList []), laws = [], proofs = [], auto = AutoLaws {simps = [], folds = [], unfolds = []}, conjs = []}, whichC = Lft, otherC = C P True (Id "cond" 0) [V P (VR (Id "P" 0,VP,WS)),C P True (Id "and" 0) [V P (VR (Id "b" 0,VP,WB)),V P (VR (Id "c" 0,VP,WB))],C P True (Id "cond" 0) [V P (VR (Id "Q" 0,VP,WS)),V P (VR (Id "c" 0,VP,WB)),V P (VR (Id "R" 0,VP,WS))]]}
END SEQUENT'
END SEQZIP
FPATH: []
BEGIN LIST STEPS
END LIST STEPS
END LIVE-PROOF
END MAP LIVE-PROOFS
END LIVE-PROOFS
END REQSTATE
