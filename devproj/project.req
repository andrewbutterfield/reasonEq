BEGIN REQSTATE
BEGIN THEORIES
THNAMES = ["AOI","And","Arith","Designs","EQV","Equal","Exists","Forall","Impl","LTL","Lists","Not","Or","Sets","UClose","UTCP","U_CWhl","U_NvWhl"]
SDAG = [[("UTCP",["U_CWhl","Sets","UClose","Exists","Forall","Equal","Impl","AOI","And","Or","Not","EQV"]),("Designs",["U_CWhl","AOI","And","Or","Not","EQV"]),("U_NvWhl",["U_CWhl","UClose","Exists","Forall","Equal","Impl","AOI","And","Or","Not","EQV"])],[("U_CWhl",["UClose","Exists","Forall","Equal","Impl","AOI","And","Or","Not","EQV"])],[("Lists",["Impl","EQV","Equal","Forall","Arith","Sets"]),("LTL",["Equal","Exists","Forall","Impl","AOI","And","Or","Not","EQV"]),("UClose",["Exists","Forall","Equal","Impl","AOI","And","Or","Not","EQV"])],[("Sets",["Impl","EQV","Equal","Forall","Arith"]),("Exists",["Forall","Equal","Impl","AOI","And","Or","Not","EQV"])],[("Arith",["Impl","EQV","Equal"]),("Forall",["Equal","Impl","AOI","And","Or","Not","EQV"])],[("Equal",["Impl","EQV"])],[("Impl",["AOI","And","Or","Not","EQV"])],[("AOI",["And","Or","Not","EQV"])],[("And",["Or","Not","EQV"])],[("Or",["Not","EQV"])],[("Not",["EQV"])],[("EQV",[])]]
END THEORIES
CURRTHEORY = UClose
BEGIN LIVE-PROOFS
BEGIN MAP LIVE-PROOFS
("UClose","univ_id_on_closed")
BEGIN LIVE-PROOF
TH-NAME: UClose
CJ-NAME: univ_id_on_closed
CONJ = ASN (C (TG (Id "B" 0)) True (Id "eqv" 0) [X (Id "[_]" 0) (V (TG (Id "B" 0)) (VR (Id "P" 0,VP,WS))),V (TG (Id "B" 0)) (VR (Id "P" 0,VP,WS))],([VSC (GV (VR (Id "P" 0,VP,WS))) NA (The (fromList [])) NA],fromList []))
SIDE = ([VSC (GV (VR (Id "P" 0,VP,WS))) NA (The (fromList [])) NA],fromList [])
STRAT red-All
BEGIN PRFSET
MM = 30
MS = 6
BD = False
TM = False
TQ = False
TS = False
FV = True
END PRFSET
BEGIN SEQZIP
TERMZIP = (X (Id "[_]" 0) (V (TG (Id "B" 0)) (VR (Id "P" 0,VP,WS))),[Cons' (TG (Id "B" 0)) True (Id "eqv" 0) [] [V (TG (Id "B" 0)) (VR (Id "P" 0,VP,WS))]])
BEGIN SEQUENT'
SIDECOND = ([VSC (GV (VR (Id "P" 0,VP,WS))) NA (The (fromList [])) NA],fromList [])
LAWS' = CLaws' {hyp0 = Theory {thName = "H.univ_id_on_closed", thDeps = [], known = VD ("",fromList [],fromList [],fromList []), laws = [], proofs = [], auto = AutoLaws {simps = [], folds = []}, conjs = []}, whichC = Lft, otherC = K (TG (Id "B" 0)) (VB True)}
END SEQUENT'
END SEQZIP
FPATH: [1]
BEGIN LIST STEPS
END LIST STEPS
END LIVE-PROOF
END MAP LIVE-PROOFS
END LIVE-PROOFS
END REQSTATE
