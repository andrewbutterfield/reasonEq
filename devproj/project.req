BEGIN REQSTATE
BEGIN REQSET
MMD = 20
MHT = False
MHQ = True
MHF = False
END REQSET
BEGIN THEORIES
THNAMES = ["And","AndOrInvert","Equality","Equiv","Exists","ForAll","Implies","Not","Or","UClose","UTPBase","XYZ"]
SDAG = [[("XYZ",["UClose","Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"]),("UTPBase",["UClose","Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("UClose",["Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Exists",["ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("ForAll",["Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Equality",["Implies","Equiv"])],[("Implies",["AndOrInvert","And","Or","Not","Equiv"])],[("AndOrInvert",["And","Or","Not","Equiv"])],[("And",["Or","Not","Equiv"])],[("Or",["Not","Equiv"])],[("Not",["Equiv"])],[("Equiv",[])]]
END THEORIES
CURRTHEORY = UTPBase
BEGIN LIVE-PROOFS
BEGIN MAP LIVE-PROOFS
("UTPBase",":=_seq_same")
BEGIN LIVE-PROOF
TH-NAME: UTPBase
CJ-NAME: :=_seq_same
CONJ = ASN (C P True (Id "eqv" 0) [C P False (Id ";" 0) [S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "e" 0,VE,WB)))]) (fromList [])),S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "f" 0,VE,WB)))]) (fromList []))],S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),S (E T) (V (E T) (VR (Id "f" 0,VE,WB))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "e" 0,VE,WB)))]) (fromList [])))]) (fromList []))],([SS UN (GV (VR (Id "e" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "f" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "x" 0,VO,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))])],fromList []))
SIDE = ([SS UN (GV (VR (Id "e" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "f" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "x" 0,VO,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))])],fromList [])
STRAT red-L2R
BEGIN SEQZIP
TERMZIP = (C P True (Id "and" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WA)),S (E T) (V (E T) (VR (Id "f" 0,VE,WD "1"))) (SN (fromList [(VR (Id "x" 0,VO,WD "1"),S (E T) (V (E T) (VR (Id "e" 0,VE,WB))) (SN (fromList []) (fromList [(LV (VR (Id "O" 0,VO,WA),[],[]),LV (VR (Id "O" 0,VO,WD "1"),[],[]))])))]) (fromList [(LV (VR (Id "O" 0,VO,WD "1"),[Id "x" 0],[]),LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[]))]))],I P True (Id "and" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WA),[Id "x" 0],[]),LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[])]],[])
BEGIN SEQUENT'
SIDECOND = ([SS UN (GV (VR (Id "e" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "f" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "x" 0,VO,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))])],fromList [])
LAWS' = CLaws' {hyp0 = Theory {thName = "H.:=_seq_same", thDeps = [], known = VD (fromList [],fromList [],fromList []), laws = [], proofs = [], auto = AutoLaws {simps = [], folds = [], unfolds = []}, conjs = []}, whichC = Lft, otherC = S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),S (E T) (V (E T) (VR (Id "f" 0,VE,WB))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "e" 0,VE,WB)))]) (fromList [])))]) (fromList []))}
END SEQUENT'
END SEQZIP
FPATH: []
BEGIN LIST STEPS
(Substitute [],ASN (S P (C P True (Id "and" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WA)),V (E T) (VR (Id "f" 0,VE,WD "1"))],I P True (Id "and" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WA),[Id "x" 0],[]),LV (VR (Id "O" 0,VO,WD "1"),[Id "x" 0],[])]]) (SN (fromList [(VR (Id "x" 0,VO,WD "1"),S (E T) (V (E T) (VR (Id "e" 0,VE,WB))) (SN (fromList []) (fromList [(LV (VR (Id "O" 0,VO,WA),[],[]),LV (VR (Id "O" 0,VO,WD "1"),[],[]))])))]) (fromList [(LV (VR (Id "O" 0,VO,WD "1"),[Id "x" 0],[]),LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[]))])),([SS UN (GV (VR (Id "e" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "f" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "x" 0,VO,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))])],fromList [])))
(UseLaw (ByMatch MEL) "exists_one_point" (BD (fromList [((Id "P" 0,VP),BT (C P True (Id "and" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WA)),V (E T) (VR (Id "f" 0,VE,WD "1"))],I P True (Id "and" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WA),[Id "x" 0],[]),LV (VR (Id "O" 0,VO,WD "1"),[Id "x" 0],[])]]))],fromList [],fromList [((Id "e" 0,VE,[],[]),BX [Right (S (E T) (V (E T) (VR (Id "e" 0,VE,WB))) (SN (fromList []) (fromList [(LV (VR (Id "O" 0,VO,WA),[],[]),LV (VR (Id "O" 0,VO,WD "1"),[],[]))]))),Left (LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[]))]),((Id "x" 0,VO,[],[]),BX [Right (V (E T) (VR (Id "x" 0,VO,WD "1"))),Left (LV (VR (Id "O" 0,VO,WD "1"),[Id "x" 0],[]))]),((Id "y" 0,VO,[],[]),BS (fromList []))])) [],ASN (B P (Id "exists" 0) (fromList [GL (LV (VR (Id "O" 0,VO,WD "1"),[],[]))]) (C P True (Id "and" 0) [C P True (Id "and" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WD "1")),S (E T) (V (E T) (VR (Id "e" 0,VE,WB))) (SN (fromList []) (fromList [(LV (VR (Id "O" 0,VO,WA),[],[]),LV (VR (Id "O" 0,VO,WD "1"),[],[]))]))],I P True (Id "and" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WD "1"),[Id "x" 0],[]),LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[])]],C P True (Id "and" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WA)),V (E T) (VR (Id "f" 0,VE,WD "1"))],I P True (Id "and" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WA),[Id "x" 0],[]),LV (VR (Id "O" 0,VO,WD "1"),[Id "x" 0],[])]]]),([SS UN (GV (VR (Id "e" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "f" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "x" 0,VO,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))])],fromList [])))
(Substitute [1,2],ASN (B P (Id "exists" 0) (fromList [GL (LV (VR (Id "O" 0,VO,WD "1"),[],[]))]) (C P True (Id "and" 0) [C P True (Id "and" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WD "1")),S (E T) (V (E T) (VR (Id "e" 0,VE,WB))) (SN (fromList []) (fromList [(LV (VR (Id "O" 0,VO,WA),[],[]),LV (VR (Id "O" 0,VO,WD "1"),[],[]))]))],I P True (Id "and" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WD "1"),[Id "x" 0],[]),LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[])]],S P (C P True (Id "and" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WA)),V (E T) (VR (Id "f" 0,VE,WB))],I P True (Id "and" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WA),[Id "x" 0],[]),LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[])]]) (SN (fromList []) (fromList [(LV (VR (Id "O" 0,VO,WB),[],[]),LV (VR (Id "O" 0,VO,WD "1"),[],[]))]))]),([SS UN (GV (VR (Id "e" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "f" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "x" 0,VO,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))])],fromList [])))
(UseLaw (ByMatch MEL) ":=_def" (BD (fromList [((Id ":=" 0,VP),BI (Id ":=" 0))],fromList [],fromList [((Id "O" 0,VO,[],[Id "x" 0]),BL [GL (LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[]))]),((Id "e" 0,VE,[],[]),BX [Right (V (E T) (VR (Id "f" 0,VE,WB)))]),((Id "x" 0,VO,[],[]),BL [GV (VR (Id "x" 0,VO,WB))])])) [1,2,1],ASN (B P (Id "exists" 0) (fromList [GL (LV (VR (Id "O" 0,VO,WD "1"),[],[]))]) (C P True (Id "and" 0) [C P True (Id "and" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WD "1")),S (E T) (V (E T) (VR (Id "e" 0,VE,WB))) (SN (fromList []) (fromList [(LV (VR (Id "O" 0,VO,WA),[],[]),LV (VR (Id "O" 0,VO,WD "1"),[],[]))]))],I P True (Id "and" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WD "1"),[Id "x" 0],[]),LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[])]],S P (S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "f" 0,VE,WB)))]) (fromList []))) (SN (fromList []) (fromList [(LV (VR (Id "O" 0,VO,WB),[],[]),LV (VR (Id "O" 0,VO,WD "1"),[],[]))]))]),([SS UN (GV (VR (Id "e" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "f" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "x" 0,VO,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))])],fromList [])))
(Substitute [1,1],ASN (B P (Id "exists" 0) (fromList [GL (LV (VR (Id "O" 0,VO,WD "1"),[],[]))]) (C P True (Id "and" 0) [S P (C P True (Id "and" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WA)),V (E T) (VR (Id "e" 0,VE,WB))],I P True (Id "and" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WA),[Id "x" 0],[]),LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[])]]) (SN (fromList []) (fromList [(LV (VR (Id "O" 0,VO,WA),[],[]),LV (VR (Id "O" 0,VO,WD "1"),[],[]))])),S P (S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "f" 0,VE,WB)))]) (fromList []))) (SN (fromList []) (fromList [(LV (VR (Id "O" 0,VO,WB),[],[]),LV (VR (Id "O" 0,VO,WD "1"),[],[]))]))]),([SS UN (GV (VR (Id "e" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "f" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "x" 0,VO,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))])],fromList [])))
(UseLaw (ByMatch MEL) ":=_def" (BD (fromList [((Id ":=" 0,VP),BI (Id ":=" 0))],fromList [],fromList [((Id "O" 0,VO,[],[Id "x" 0]),BL [GL (LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[]))]),((Id "e" 0,VE,[],[]),BX [Right (V (E T) (VR (Id "e" 0,VE,WB)))]),((Id "x" 0,VO,[],[]),BL [GV (VR (Id "x" 0,VO,WB))])])) [1,1,1],ASN (B P (Id "exists" 0) (fromList [GL (LV (VR (Id "O" 0,VO,WD "1"),[],[]))]) (C P True (Id "and" 0) [S P (S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "e" 0,VE,WB)))]) (fromList []))) (SN (fromList []) (fromList [(LV (VR (Id "O" 0,VO,WA),[],[]),LV (VR (Id "O" 0,VO,WD "1"),[],[]))])),S P (S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "f" 0,VE,WB)))]) (fromList []))) (SN (fromList []) (fromList [(LV (VR (Id "O" 0,VO,WB),[],[]),LV (VR (Id "O" 0,VO,WD "1"),[],[]))]))]),([SS UN (GV (VR (Id "e" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "f" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "x" 0,VO,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))])],fromList [])))
(UseLaw (ByMatch MEL) ";_def" (BD (fromList [((Id "P" 0,VP),BT (S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "e" 0,VE,WB)))]) (fromList [])))),((Id "Q" 0,VP),BT (S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "f" 0,VE,WB)))]) (fromList []))))],fromList [("0","1")],fromList [((Id "O" 0,VO,[],[]),BL [GL (LV (VR (Id "O" 0,VO,WB),[],[]))])])) [],ASN (C P False (Id ";" 0) [S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "e" 0,VE,WB)))]) (fromList [])),S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "f" 0,VE,WB)))]) (fromList []))],([SS UN (GV (VR (Id "e" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "f" 0,VE,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))]),SS UN (GV (VR (Id "x" 0,VO,WB))) (fromList [GL (LV (VR (Id "O" 0,VO,WB),[],[]))])],fromList [])))
END LIST STEPS
END LIVE-PROOF
END MAP LIVE-PROOFS
END LIVE-PROOFS
END REQSTATE
