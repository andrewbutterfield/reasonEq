BEGIN REQSTATE
BEGIN REQSET
MMD = 20
MHT = True
MHQ = True
MHF = False
END REQSET
BEGIN THEORIES
THNAMES = ["And","AndOrInvert","Arithmetic","Equality","Equiv","Exists","ForAll","Implies","Not","Or","Sets","UClose","UTPBase","XYZ"]
SDAG = [[("XYZ",["UClose","Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"]),("UTPBase",["UClose","Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("UClose",["Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Exists",["ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Sets",["Implies","Equiv","Equality"]),("Arithmetic",["Implies","Equiv","Equality"]),("ForAll",["Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Equality",["Implies","Equiv"])],[("Implies",["AndOrInvert","And","Or","Not","Equiv"])],[("AndOrInvert",["And","Or","Not","Equiv"])],[("And",["Or","Not","Equiv"])],[("Or",["Not","Equiv"])],[("Not",["Equiv"])],[("Equiv",[])]]
END THEORIES
CURRTHEORY = Sets
BEGIN LIVE-PROOFS
BEGIN MAP LIVE-PROOFS
("Sets","union_r_unit")
BEGIN LIVE-PROOF
TH-NAME: Sets
CJ-NAME: union_r_unit
CONJ = ASN (C (TP 1) True (Id "=" 0) [C (TC (Id "powerset" 0) [TV (Id "t" 0)]) False (Id "union" 0) [V (TC (Id "powerset" 0) [TV (Id "t" 0)]) (VR (Id "S" 0,VE,WS)),V (TC (Id "powerset" 0) [TV (Id "t" 0)]) (VR (Id "emptyset" 0,VO,WS))],V (TC (Id "powerset" 0) [TV (Id "t" 0)]) (VR (Id "S" 0,VE,WS))],([],fromList []))
SIDE = ([],fromList [])
STRAT red-All
BEGIN SEQZIP
TERMZIP = (C (TP 1) True (Id "=" 0) [C (TC (Id "powerset" 0) [TV (Id "t" 0)]) False (Id "union" 0) [V (TC (Id "powerset" 0) [TV (Id "t" 0)]) (VR (Id "S" 0,VE,WS)),V (TC (Id "powerset" 0) [TV (Id "t" 0)]) (VR (Id "emptyset" 0,VO,WS))],V (TC (Id "powerset" 0) [TV (Id "t" 0)]) (VR (Id "S" 0,VE,WS))],[])
BEGIN SEQUENT'
SIDECOND = ([],fromList [])
LAWS' = CLaws' {hyp0 = Theory {thName = "H.union_r_unit", thDeps = [], known = VD (fromList [],fromList [],fromList []), laws = [], proofs = [], auto = AutoLaws {simps = [], folds = [], unfolds = []}, conjs = []}, whichC = Lft, otherC = K (TP 1) (VB True)}
END SEQUENT'
END SEQZIP
FPATH: []
BEGIN LIST STEPS
END LIST STEPS
END LIVE-PROOF
END MAP LIVE-PROOFS
END LIVE-PROOFS
END REQSTATE
